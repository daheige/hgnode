在读写文件时候，nodejs将其看做一个整体，分配到缓存区，一次性将文件内容读取到缓存区，在这个期间nodejs不能做其他操作。
当我们使用read方法，是一块块的读取到内存缓存区中，写满后再将缓存区中的内容读取（或写入到文件）。
在大多情况下，我们只是关心是否从文件中读取内容，以及读取后的处理。
流是一组有序的，有终点和起点的字节数据的传输手段。
fs.createReadStream 用于读取文件
    可能触发的方法data,end,error,close

    用于各种读取数据的对象方法，可用用on来监听事件
    read 读取数据
    setEnconding 设置编码
    pause终止触发的事件
    resume恢复
    pipe用于设置一个数据通道，然后取出所有流数据将其输出到另一个通道的目标对象中
    unpipe取消通道

fs.createWriteStream 写入数据

    pipe通道，用于读取数据对象流到另一个通道的目标对象中

fs.createReadStream(path,options) 创建文件读取流
    //第二个参数可选
    options = {
        flag : 'r',
        encoding:'utf8',
        start : 0, //读取的开始位置
        end : -1 //文件读取的结束位置
    }
fs.createWriteStream(path,options)
witable.write(chuck,encoding,callback) 创建文件写入流,chuck可以使一个buffer对象或者字符串

readStream.pipe(out,options) //文件流readStream,写入out对象中。
    options = {end:true} //默认为true,当end为true表示当文件流的内容全部读取完毕后，立即写入到out中去,并关闭out
    当为false不关闭文件out,可以继续写入数据。
    当使用pipe方式写入文件内容，读取文件流的路径是一个完整的路径
